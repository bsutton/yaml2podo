// Generated by 'yaml2podo'
// Version: 0.1.18
// https://pub.dev/packages/yaml2podo

class Alias {
  final String clazz;

  Alias({this.clazz});

  factory Alias.fromJson(Map<String, dynamic> json) {
    return Alias(
      clazz: json['class'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'class': clazz,
    };
  }
}

class Bar {
  final int i;

  Bar({this.i});

  factory Bar.fromJson(Map<String, dynamic> json) {
    return Bar(
      i: json['i'] as int,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'i': i,
    };
  }
}

class EmptyObject {
  EmptyObject();

  factory EmptyObject.fromJson(Map<String, dynamic> json) {
    return EmptyObject();
  }

  Map<String, dynamic> toJson() {
    return {};
  }
}

class Foo {
  final Map<String, Bar> bars;

  Foo({this.bars});

  factory Foo.fromJson(Map<String, dynamic> json) {
    return Foo(
      bars: _toObjectMap(json['bars'], (e) => Bar.fromJson(e)),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'bars': _fromMap(bars, (e) => e.toJson()),
    };
  }
}

class ObjectWithObjects {
  final List<Object> list;
  final Map<String, Object> map;

  ObjectWithObjects({this.list, this.map});

  factory ObjectWithObjects.fromJson(Map<String, dynamic> json) {
    return ObjectWithObjects(
      list: _toList(json['list'], (e) => e),
      map: _toMap(json['map'], (e) => e),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'list': _fromList(list, (e) => e),
      'map': _fromMap(map, (e) => e),
    };
  }
}

class Order {
  final double amount;
  final DateTime date;
  final bool isShipped;
  final List<OrderItem> items;

  Order({this.amount, this.date, this.isShipped, this.items});

  factory Order.fromJson(Map<String, dynamic> json) {
    return Order(
      amount: _toDouble(json['amount']),
      date: _toDateTime(json['date']),
      isShipped: json['is_shipped'] as bool,
      items: _toObjectList(json['items'], (e) => OrderItem.fromJson(e)),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'amount': amount,
      'date': _fromDateTime(date),
      'is_shipped': isShipped,
      'items': _fromList(items, (e) => e.toJson()),
    };
  }
}

class OrderItem {
  final num price;
  final Product product;
  final int quantity;

  OrderItem({this.price, this.product, this.quantity});

  factory OrderItem.fromJson(Map<String, dynamic> json) {
    return OrderItem(
      price: json['price'] as num,
      product: _toObject(json['product'], (e) => Product.fromJson(e)),
      quantity: json['quantity'] as int,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'price': price,
      'product': product?.toJson(),
      'quantity': quantity,
    };
  }
}

class Product {
  final int id;
  final String name;

  Product({this.id, this.name});

  factory Product.fromJson(Map<String, dynamic> json) {
    return Product(
      id: json['id'] as int,
      name: json['name'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
    };
  }
}

class Super {
  final bool boolean;
  final DateTime date;
  final double float;
  final Foo foo;
  final Foo foo2;
  final int integer;
  final List<Map<String, Bar>> list;
  final Map<int, List<Bar>> map;
  final Map<String, List<int>> map2;
  final String string;

  Super(
      {this.boolean,
      this.date,
      this.float,
      this.foo,
      this.foo2,
      this.integer,
      this.list,
      this.map,
      this.map2,
      this.string});

  factory Super.fromJson(Map<String, dynamic> json) {
    return Super(
      boolean: json['boolean'] as bool,
      date: _toDateTime(json['date']),
      float: _toDouble(json['float']),
      foo: _toObject(json['foo'], (e) => Foo.fromJson(e)),
      foo2: _toObject(json['foo2'], (e) => Foo.fromJson(e)),
      integer: json['integer'] as int,
      list:
          _toList(json['list'], (e) => _toObjectMap(e, (e) => Bar.fromJson(e))),
      map: _toMap(json['map'], (e) => _toObjectList(e, (e) => Bar.fromJson(e))),
      map2: _toMap(json['map2'], (e) => _toList(e, (e) => e as int)),
      string: json['string'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'boolean': boolean,
      'date': _fromDateTime(date),
      'float': float,
      'foo': foo?.toJson(),
      'foo2': foo2?.toJson(),
      'integer': integer,
      'list': _fromList(list, (e) => _fromMap(e, (e) => e.toJson())),
      'map': _fromMap(map, (e) => _fromList(e, (e) => e.toJson())),
      'map2': _fromMap(map2, (e) => _fromList(e, (e) => e)),
      'string': string,
    };
  }
}

String _fromDateTime(data) {
  if (data == null) {
    return null;
  }
  if (data is DateTime) {
    return data.toIso8601String();
  }
  return data as String;
}

List _fromList(data, Function(dynamic) toJson) {
  if (data == null) {
    return null;
  }
  var result = [];
  for (var element in data) {
    var value;
    if (element != null) {
      value = toJson(element);
    }
    result.add(value);
  }
  return result;
}

Map<K, V> _fromMap<K, V>(data, V Function(dynamic) toJson) {
  if (data == null) {
    return null;
  }
  var result = <K, V>{};
  for (var key in data.keys) {
    V value;
    var element = data[key];
    if (element != null) {
      value = toJson(element);
    }
    result[key as K] = value;
  }
  return result;
}

DateTime _toDateTime(data) {
  if (data == null) {
    return null;
  }
  if (data is String) {
    return DateTime.parse(data);
  }
  return data as DateTime;
}

double _toDouble(data) {
  if (data == null) {
    return null;
  }
  if (data is int) {
    return data.toDouble();
  }
  return data as double;
}

List<T> _toList<T>(data, T Function(dynamic) fromJson) {
  if (data == null) {
    return null;
  }
  var result = <T>[];
  for (var element in data) {
    T value;
    if (element != null) {
      value = fromJson(element);
    }
    result.add(value);
  }
  return result;
}

Map<K, V> _toMap<K, V>(data, V Function(dynamic) fromJson) {
  if (data == null) {
    return null;
  }
  var result = <K, V>{};
  for (var key in data.keys) {
    V value;
    var element = data[key];
    if (element != null) {
      value = fromJson(element);
    }
    result[key as K] = value;
  }
  return result;
}

T _toObject<T>(data, T Function(Map<String, dynamic>) fromJson) {
  if (data == null) {
    return null;
  }
  return fromJson(data as Map<String, dynamic>);
}

List<T> _toObjectList<T>(data, T Function(Map<String, dynamic>) fromJson) {
  if (data == null) {
    return null;
  }
  var result = <T>[];
  for (var element in data) {
    T value;
    if (element != null) {
      value = fromJson(element as Map<String, dynamic>);
    }
    result.add(value);
  }
  return result;
}

Map<K, V> _toObjectMap<K, V>(data, V Function(Map<String, dynamic>) fromJson) {
  if (data == null) {
    return null;
  }
  var result = <K, V>{};
  for (var key in data.keys) {
    V value;
    var element = data[key];
    if (element != null) {
      value = fromJson(element as Map<String, dynamic>);
    }
    result[key as K] = value;
  }
  return result;
}

/*
Alias:
  clazz.class: String
Bar:
  i: int
Foo:
  bars: Map<String, Bar>
Order:
  amount: double
  date: DateTime
  items: List<OrderItem>
  is_shipped: bool
OrderItem:
  product: Product
  quantity: int
  price: num
Product:
  id: int
  name: String
ObjectWithObjects:
  list: List<Object>
  map: Map<String, Object>
Super:
  boolean: bool
  date: DateTime 
  float: double
  foo: Foo
  foo2: Foo
  integer: int
  string: String
  list: List<Map<String, Bar>>
  map: Map<int, List<Bar>>
  map2: Map<String, List<int>>
EmptyObject:
*/
